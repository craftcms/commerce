{% extends "commerce/_layouts/store-management" %}
{% set isIndex = false %}

{% set crumbs = [
    { label: "Discounts"|t('commerce'), url: url("commerce/store-management/#{storeHandle}/discounts") },
] %}

{% set fullPageForm = true %}

{% import "_includes/forms" as forms %}
{% import "commerce/_includes/forms/commerceForms" as commerceForms %}

{% set mainFormAttributes = {
    id: 'discountform',
    method: 'post',
    'accept-charset': 'UTF-8'
} %}

{% set formActions = [
  {
    label: 'Save and continue editing'|t('app'),
    redirect: (isNewDiscount ? 'commerce/store-management/#{storeHandle}/discounts/{id}' : discount.getCpEditUrl())|hash,
    retainScroll: true,
    shortcut: true,
  }]
%}

{% set discountClasses = "" %}
{% if (discount.getErrors('name')) %}
    {% set discountClasses = "error" %}
{% endif %}

{% set matchingItemsClasses = "" %}
{% if false %}
    {% set matchingItemsClasses = "error" %}
{% endif %}

{% set conditionsClasses = "" %}
{% if(discount.getErrors('startDate') or discount.getErrors('endDate')) %}
    {% set conditionsClasses = "error" %}
{% endif %}

{% set couponClasses = "" %}
{% if(discount.getErrors('code')) %}
    {% set couponClasses = "error" %}
{% endif %}

{% set tabs = {
    discount: {'label':'Discount'|t('commerce'),'url':'#discount','class':discountClasses},
    coupons: {'label':'Coupons'|t('commerce'),'url':'#coupons','class':couponClasses},
    matchingItems: {'label':'Matching Items'|t('commerce'),'url':'#matching-items','class':matchingItemsClasses},
    conditions: {'label':'Conditions'|t('commerce'),'url':'#conditions','class':conditionsClasses},
    actions: {'label':'Actions'|t('commerce'),'url':'#actions'}
} %}

{% set couponsTable = {
    name: 'coupons',
    id: 'coupons-table',
    cols: {
        id: {
            type: 'singleline',
            heading: 'id'|t('app'),
            class: 'hidden',
        },
        code: {
            type: 'singleline',
            heading: 'Code'|t('commerce'),
        },
        uses: {
            type: 'singleline',
            heading: 'Uses'|t('commerce'),
        },
        maxUses: {
            type: 'singleline',
            heading: 'Max Uses'|t('commerce'),
            info: 'Leave blank for unlimited uses.'|t('commerce'),
        },
    },
    defaultValues: { uses: 0 }
} %}

{% hook "cp.commerce.discounts.edit" %}

{% block details %}

    <div class="meta">
        {{ forms.lightSwitchField({
            label: "Enable this discount"|t('commerce'),
            id: 'enabled',
            name: 'enabled',
            value: 1,
            on: discount.enabled,
            errors: discount.getErrors('enabled')
        }) }}
    </div>

    {% if discount and discount.id %}
        <div class="meta read-only">
            <div class="data">
                <h5 class="heading">{{ "Created at"|t('app') }}</h5>
                <div id="date-created-value" class="value">{{ discount.dateCreated|datetime('short') }}</div>
            </div>
            <div class="data">
                <h5 class="heading">{{ "Updated at"|t('app') }}</h5>
                <div id="date-updated-value" class="value">{{ discount.dateUpdated|datetime('short') }}</div>
            </div>
        </div>
    {% endif %}

    {% hook "cp.commerce.discounts.edit.details" %}
{% endblock %}

{% block content %}
        {% set formAttributes = {
            id: 'discountform',
            method: 'post',
            'accept-charset': 'UTF-8',
            data: {
                saveshortcut: true,
                'saveshortcut-redirect':  "commerce/store-management/#{storeHandle}/discounts"|hash,
                'confirm-unload': true
            },
        } %}
    <form {{ attr(formAttributes) }}>
    <input type="hidden" name="action" value="commerce/discounts/save">
    {{ redirectInput("commerce/store-management/#{storeHandle}/discounts") }}
    {{ hiddenInput('storeId', discount.storeId) }}
    {% if discount.id %}
        <input type="hidden" name="sortOrder" value="{{ discount.sortOrder }}">
        <input type="hidden" name="id" value="{{ discount.id }}">
    {% endif %}

    <div id="discount" class="flex-fields">
        {{ forms.textField({
            first: true,
            label: "Name"|t('commerce'),
            instructions: "What this discount will be called in the control panel."|t('commerce'),
            id: 'name',
            name: 'name',
            value: discount.name,
            errors: discount.getErrors('name'),
            autofocus: true,
            required: true,
        }) }}

        {{ forms.textField({
            label: "Description"|t('commerce'),
            instructions: "Discount description."|t('commerce'),
            id: 'description',
            name: 'description',
            value: discount.description,
            errors: discount.getErrors('description'),
        }) }}

        {% hook "cp.commerce.discount.edit" %}
    </div>

    <div id="matching-items" class="hidden flex-fields">

        <h3>{{ "Limit which orders this discount applies to based on its line items."|t('commerce') }}</h3>
        {{ forms.lightswitchField({
            label: "Only match certain purchasables…"|t('commerce'),
            id: 'allPurchasables',
            name: 'allPurchasables',
            toggle: '#matching-items-purchasables',
            on: not discount.allPurchasables,
            errors: discount.getErrors('allPurchasables')
        }) }}

        <div id="matching-items-purchasables" {% if discount.allPurchasables %}class="hidden"{% endif %}>
            {% for purchasableType in purchasableTypes %}
                {{ forms.elementSelectField({
                    id: 'purchasables-'~purchasableType.elementType|id,
                    label: purchasableType.name,
                    name: 'purchasables['~purchasableType.elementType~']',
                    elements: purchasables[purchasableType.elementType] ?? null,
                    elementType: purchasableType.elementType,
                    limit: null,
                    errors: discount.getErrors('purchasables-'~purchasableType.elementType|replace('\\','-')),
                }) }}
            {% endfor %}
        </div>

        {% set showCategories = craft.categories.exists() %}
        {% set showEntries = craft.entries.exists() %}

        {% if not showCategories and not showEntries %}
            {{ forms.hidden({
                name: 'allCategories',
                value: false,
            }) }}
        {% endif %}

        {% if showCategories or showEntries %}

        <hr class="hr">

        {{ forms.lightswitchField({
            label: "Only match purchasables related to…"|t('commerce'),
            id: 'allCategories',
            name: 'allCategories',
            toggle: '#matching-items-categories',
            on: not discount.allCategories,
            errors: discount.getErrors('allCategories')
        }) }}

        <div id="matching-items-categories" {% if discount.allCategories %}class="hidden"{% endif %}>

            {% if showCategories %}
            {{ forms.elementSelectField({
                id: 'categories',
                label: 'Categories'|t('commerce'),
                name: 'relatedElements[categories]',
                elements: categories ? categories : null,
                elementType: categoryElementType,
                limit: null,
                errors: discount.getErrors('categories'),
                showSiteMenu: true,
            }) }}
            {% endif %}

            {% if showEntries %}
            {{ forms.elementSelectField({
                id: 'entries',
                label: 'Entries'|t('app'),
                name: 'relatedElements[entries]',
                elements: entries ? entries : null,
                elementType: entryElementType,
                limit: null,
                showSiteMenu: true,
                errors: discount.getErrors('categories'),
            }) }}
            {% endif %}

            <a class="fieldtoggle {% if (discount.categoryRelationshipType != 'element') %}expanded{% endif %}"
               data-target="categoryRelationshipType-advanced">{{ 'Advanced'|t('commerce') }}</a>
            <div id="categoryRelationshipType-advanced"
                 class="{% if (discount.categoryRelationshipType == 'element') %}hidden{% endif %}">

                {{ forms.radioGroupField({
                    id: 'categoryRelationshipType',
                    name: 'categoryRelationshipType',
                    label: 'Relationship Type'|t('commerce'),
                    options: elementRelationshipTypeOptions,
                    value: discount.categoryRelationshipType,
                    errors: discount.getErrors('categoryRelationshipType')
                }) }}
            </div>
        </div>
        {% endif %}

    </div>

    <div id="coupons" class="hidden flex-fields">
        <div id="commerce-coupons">
            {% set tableField %}
                <div>
                    {{ forms.editableTable({
                        id: 'commerce-coupons-table',
                        name: couponsTable.name,
                        cols: couponsTable.cols,
                        rows: discount.coupons,
                        addRowLabel: 'Add a coupon'|t('commerce'),
                        allowAdd: true,
                        allowDelete: true,
                        initJs: false
                    }) }}
                </div>
            {% endset %}
            {{ forms.field({
                label: 'Coupons'|t('commerce'),
                errors: discount.getErrors('coupons'),
                headingSuffix: forms.button({
                    id: 'commerce-coupons-generate',
                    label: 'Generate'|t('commerce'),
                    spinner: true,
                }),
            }, tableField) }}

            {# This field is update from the generate hud when generating new coupons #}
            {{ forms.hidden({
                id: 'commerce-coupon-format',
                name: 'couponFormat',
                value: discount.couponFormat,
            }) }}
        </div>
    </div>

    <div id="conditions" class="hidden flex-fields">

        {% set orderConditionInput %}
            {{ discount.orderCondition.getBuilderHtml()|raw }}
        {% endset %}

        {{ forms.field({
            label: 'Match Order'|t('commerce'),
            instructions: 'Create rules that allow this discount to match the order.'|t('commerce'),
            errors: discount.getErrors('orderCondition')
        }, orderConditionInput) }}

        {% set customerConditionInput %}
            {{ discount.customerCondition.getBuilderHtml()|raw }}
        {% endset %}

        {{ forms.field({
            label: 'Match Customer'|t('commerce'),
            instructions: 'Create rules that allow this discount to match the order’s customer.'|t('commerce'),
            errors: discount.getErrors('customerCondition')
        }, customerConditionInput) }}

        {% set shippingAddressConditionInput %}
            {{ discount.shippingAddressCondition.getBuilderHtml()|raw }}
        {% endset %}

        {{ forms.field({
            label: 'Match Shipping Address'|t('commerce'),
            instructions: 'Create rules that allow this discount to match the order’s shipping address.'|t('commerce'),
            errors: discount.getErrors('shippingAddressCondition')
        }, shippingAddressConditionInput) }}

        {% set billingAddressConditionInput %}
            {{ discount.billingAddressCondition.getBuilderHtml()|raw }}
        {% endset %}

        {{ forms.field({
            label: 'Match Billing Address'|t('commerce'),
            instructions: 'Create rules that allow this discount to match the order’s billing address.'|t('commerce'),
            errors: discount.getErrors('billingAddressCondition')
        }, billingAddressConditionInput) }}

        {{ forms.dateTimeField({
            label: "Start Date"|t('commerce'),
            instructions: "Date from which the discount will be active. Leave blank for unlimited start date"|t('commerce'),            id: 'dateFrom',
            name: 'dateFrom',
            value: discount.dateFrom,
            errors: discount.getErrors('dateFrom'),
        }) }}

        {{ forms.dateTimeField({
            label: "End Date"|t('commerce'),            instructions: "Date when the discount will be finished. Leave blank for unlimited end date"|t('commerce'),
            id: 'dateTo',
            name: 'dateTo',
            value: discount.dateTo,
            errors: discount.getErrors('dateTo'),
        }) }}

        {% embed '_includes/forms/field' with {
            label: 'Order Condition Formula'|t('commerce'),
            id: 'orderConditionFormula',
            rows: 5,
            instructions: 'Specify a <a href="{url}">Twig condition</a> that determines whether the discount should apply to a given order. (The order can be referenced via an `order` variable.)'|t('commerce', {
                url: 'https://twig.symfony.com/doc/2.x/templates.html#expressions',
            }),
            errors: discount is defined ? discount.getErrors('orderConditionFormula'),
        } %}
            {% block input %}
                {% import "_includes/forms" as forms %}
                <div id="orderConditionFormulaField" class="flex flex-nowrap" style="align-items: stretch;">
                    <div class="order-condition">
                        {{ forms.textarea({
                            value: discount is defined ? discount.orderConditionFormula,
                            name: 'orderConditionFormula',
                            class: 'code',
                            rows: 5,
                            placeholder: 'Example'|t('commerce') ~ ': \'@apple.com\' in order.email'
                        }) }}
                    </div>
                </div>
            {% endblock %}
        {% endembed %}

        {{ forms.moneyField({
            label: "Purchase Total"|t('commerce'),
            instructions: "Restrict the discount to only those orders where the customer has purchased a minimum total value of matching items."|t('commerce'),
            id: 'purchaseTotal',
            name: 'purchaseTotal',
            value: discount.purchaseTotal ? discount.purchaseTotal|number : 0,
            currencyLabel: currency,
            decimals: decimals,
            showCurrency: true,
            showClear: false,
            errors: discount.getErrors('purchaseTotal'),
        }) }}

        {{ forms.textField({
            label: "Minimum Purchase Quantity"|t('commerce'),
            instructions: "Minimum number of matching items that need to be ordered for this discount to apply."|t('commerce'),
            id: 'purchaseQty',
            name: 'purchaseQty',
            value: discount.purchaseQty,
            type: 'number',
            errors: discount.getErrors('purchaseQty'),
        }) }}

        {{ forms.textField({
            label: "Maximum Purchase Quantity"|t('commerce'),
            instructions: "Maximum number of matching items that can be ordered for this discount to apply. A zero value here will skip this condition."|t('commerce'),
            id: 'maxPurchaseQty',
            name: 'maxPurchaseQty',
            value: discount.maxPurchaseQty,
            type: 'number',
            errors: discount.getErrors('maxPurchaseQty'),
        }) }}

        {% set customerUsage = customerUsage and customerUsage|length ? customerUsage : {uses: 0, users: 0} %}
        {% set userCounterMarkup %}
            <div class="flex">
                <div>
                    {{ forms.text({
                        id: 'perUserLimit',
                        name: 'perUserLimit',
                        value: discount.perUserLimit,
                        type: 'number',
                        min: '0',
                        step: '1',
                        size: 5
                    }) }}
                </div>
                <div>
                    <input id="user-usage-counter" disabled class="text disabled fullwidth" size="30"
                           value="{{ '{uses} uses across {users} users'|t('commerce', customerUsage) }}">
                </div>
                <div>
                    <div class="btn clear-btn discount-clear-use" data-spinner="#clear-user-usage-spinner"
                         data-field="#user-usage-counter"
                         data-type="{{ counterTypeUser }}">{{ "Reset usage"|t('commerce') }}</div>
                    <div id="clear-user-usage-spinner" class="spinner hidden"></div>
                </div>
            </div>
        {% endset %}
        {{ forms.field({
            label: "Per User Discount Limit"|t('commerce'),
            instructions: "How many times one user is allowed to use this discount. If this is set to something besides zero, the discount will only be available to signed in users."|t('commerce'),
            errors: discount.getErrors('perUserLimit')
        }, userCounterMarkup) }}

        {% set emailUsage = emailUsage and emailUsage|length ? emailUsage : {uses: 0, emails: 0} %}
        {% set emailCounterMarkup %}
            <div class="flex">
                <div>
                    {{ forms.text({
                        id: 'perEmailLimit',
                        name: 'perEmailLimit',
                        value: discount.perEmailLimit,
                        type: 'number',
                        min: '0',
                        step: '1',
                        size: 5
                    }) }}
                </div>
                <div>
                    <input id="email-usage-counter" disabled class="text disabled fullwidth" size="30"
                           value="{{ '{uses} uses across {emails} email addresses'|t('commerce', emailUsage) }}">
                </div>
                <div>
                    <div class="btn clear-btn discount-clear-use" data-spinner="#clear-email-usage-spinner"
                         data-field="#email-usage-counter"
                         data-type="{{ counterTypeEmail }}">{{ "Reset usage"|t('commerce') }}</div>
                    <div id="clear-email-usage-spinner" class="spinner hidden"></div>
                </div>
            </div>
        {% endset %}
        {{ forms.field({
            label: 'Per Email Address Discount Limit'|t('commerce'),
            instructions: 'How many times one email address is allowed to use this discount. This applies to all previous orders, whether guest or user. Set to zero for unlimited use by guests or users.'|t('commerce'),
            errors: discount.getErrors('perEmailLimit')
        }, emailCounterMarkup) }}

        {% set totalDiscountUsesWording = discount.totalDiscountUses != 1 ? '{count} times' : '{count} time' %}
        {% set totalDiscountLimitMarkup %}
            <div class="flex">
                <div>
                    {{ forms.text({
                        id: 'totalDiscountUseLimit',
                        name: 'totalDiscountUseLimit',
                        value: discount.totalDiscountUseLimit,
                        type: 'number',
                        min: '0',
                        step: '1',
                        size: 5
                    }) }}
                </div>
                <div>
                    <input id="total-discount-use-counter" disabled class="text disabled fullwidth" size="10"
                           value="{{ totalDiscountUsesWording|t('commerce', {count: discount.totalDiscountUses}) }}">
                </div>
                <div>
                    <div class="btn clear-btn discount-clear-use" data-spinner="#clear-discount-use-spinner"
                         data-field="#total-discount-use-counter"
                         data-type="{{ counterTypeTotal }}">{{ "Clear counter"|t('commerce') }}</div>
                    <div id="clear-discount-use-spinner" class="spinner hidden"></div>
                </div>
            </div>
        {% endset %}
        {{ forms.field({
            label: 'Total Discount Use Limit'|t('commerce'),
            instructions: "How many times this discount can be used in total by guests or signed in users. Set zero for unlimited use."|t('commerce'),
            errors: discount.getErrors('totalDiscountUseLimit'),
        }, totalDiscountLimitMarkup) }}


        {{ forms.lightswitchField({
            label: "Exclude this discount for products that are already on promotion"|t('commerce'),
            id: 'excludeOnPromotion',
            name: 'excludeOnPromotion',
            on: discount.excludeOnPromotion ? true : false,
            errors: discount.getErrors('excludeOnPromotion')
        }) }}
    </div>

    <div id="actions" class="hidden flex-fields">

        <h3>{{ 'Per Item Discount'|t('commerce') }}</h3>
        {{ forms.selectField({
            label: "Discounted Items"|t('commerce'),
            instructions: "When this discount is applied to an order, which line items should be discounted?"|t('commerce'),
            id: 'appliedTo',
            name: 'appliedTo',
            options: appliedTo,
            value: discount.appliedTo
        }) }}

        {{ forms.moneyField({
            label: "Per Item Amount Off"|t('commerce'),
            instructions: "The flat value which should discount each item. i.e “3” for $3 off each item."|t('commerce'),
            id: 'perItemDiscount',
            name: 'perItemDiscount',
            value: discount.perItemDiscount ? discount.perItemDiscount|number : 0,
            currencyLabel: currency,
            decimals: decimals,
            showCurrency: true,
            showClear: false,
            errors: discount.getErrors('perItemDiscount'),
        }) }}

        {% set pctDiscountInput %}
            <div class="flex">
                {{ forms.text({
                    id: 'percentDiscount',
                    name: 'percentDiscount',
                    value: (-(discount.percentDiscount ?? 0) * 100)|number,
                    class: 'code ltr',
                    size: 5,
                }) }}
                {{ forms.select({
                    id: 'percentageOffSubject',
                    name: 'percentageOffSubject',
                    options: [
                        {
                            label: "{pct} off the discounted item price"|t('commerce', {
                                pct: percentSymbol,
                            }),
                            value: 'discounted',
                        },
                        {
                            label: "{pct} off the original item price"|t('commerce', {
                                pct: percentSymbol,
                            }),
                            value: 'original',
                        },
                    ],
                    value: discount.percentageOffSubject
                }) }}
            </div>
        {% endset %}

        {{ forms.field({
            label: "Per Item Percentage Off"|t('commerce'),
            instructions: "The percentile value which should discount each item. i.e. {ex1} for {ex2} off. Percentages are rounded to 2 decimal places."|t('commerce', {
                ex1: "`10`",
                ex2: 0.1|percentage,
            }),
            id: 'percentDiscount',
            errors: discount.getErrors('percentDiscount'),
            tip: 'If you select the percentage to be  “off the discounted item price”, this will include the “Per Item Amount” as well as any other discounts that applied before this one.'|t('commerce')
        }, pctDiscountInput) }}

        {{ forms.lightswitchField({
            label: "Ignore promotional prices when this discount is applied to matching line items"|t('commerce'),
            id: 'ignorePromotions',
            name: 'ignorePromotions',
            on: discount.ignorePromotions ? true : false
        }) }}

        <hr>
        <h3>{{ 'Flat Amount Off Order'|t('commerce') }}</h3>

        {{ forms.moneyField({
            label: "Flat Order Discount Amount Off"|t('commerce'),
            instructions: "The amount of discount that is applied to the whole order. This amount is spread across line items in order of highest price to lowest price, until the discount is used up."|t('commerce'),
            id: 'baseDiscount',
            errors: discount.getErrors('baseDiscount'),
            tip: 'The base discount can only discount items in the cart to down to zero until it is used up, it can not make the order negative.'|t('commerce'),
            name: 'baseDiscount',
            currencyLabel: currency,
            showCurrency: true,
            showClear: false,
            decimals: decimals,
            value: discount.baseDiscount ? discount.baseDiscount|number : 0,
        }) }}

        <hr>
        <h3>{{ 'Additional Actions'|t('commerce') }}</h3>

        {{ forms.lightswitchField({
            label: "Remove all shipping costs from the order"|t('commerce'),
            id: 'hasFreeShippingForOrder',
            name: 'hasFreeShippingForOrder',
            on: discount.hasFreeShippingForOrder ? true : false
        }) }}

        {{ forms.lightswitchField({
            label: "Remove shipping costs for matching items only"|t('commerce'),
            id: 'hasFreeShippingForMatchingItems',
            name: 'hasFreeShippingForMatchingItems',
            on: discount.hasFreeShippingForMatchingItems ? true : false
        }) }}

        {{ forms.lightswitchField({
            label: "Don’t apply any subsequent discounts to an order if this discount is applied"|t('commerce'),
            id: 'stopProcessing',
            name: 'stopProcessing',
            on: discount.stopProcessing ? true : false,
            errors: discount.getErrors('stopProcessing')
        }) }}
    </div>

    {% hook "cp.commerce.discounts.edit.content" %}
{% endblock %}

{% js %}
$(function() {

    $('#code').on('keyup blur', function(event) {
        if (this.value.length === 0) {
            $('#coupon-fields').addClass('hidden');
        } else {
            $('#coupon-fields').removeClass('hidden');
        }
    });

    function disableShippingSwitch() {
        $('#hasFreeShippingForMatchingItems').data('lightswitch').turnOff();
        $('input[name="hasFreeShippingForMatchingItems"]').prop("disabled", true);
        $('#hasFreeShippingForMatchingItems').prop("disabled", true);
        $("#hasFreeShippingForMatchingItems").addClass("disabled");
    }

    function enableShippingSwitch() {
        $('input[name="hasFreeShippingForMatchingItems"]').prop("disabled", false);
        $('#hasFreeShippingForMatchingItems').prop("disabled", false);
        $("#hasFreeShippingForMatchingItems").removeClass("disabled");
    }

    if ($('input[name="hasFreeShippingForOrder"]').val() == 1) {
        disableShippingSwitch();
    }

    $('#hasFreeShippingForOrder').click(function() {
        if ($('input[name="hasFreeShippingForOrder"]').val() == 1) {
            disableShippingSwitch();
        } else {
            enableShippingSwitch();
        }
    });

    $('.clear-btn.discount-clear-use').click(function(event) {
        var $this = $(this);
        var $spinner = $($this.data('spinner'));
        var $field = $($this.data('field'));
        var type = $this.data('type');
        var r = confirm(Craft.t('commerce', 'Are you sure you want to clear this discount usage counter?'));

        if (r == true) {
            $spinner.toggleClass('hidden');
            $.ajax({
                type: "POST",
                dataType: 'json',
                headers: {
                    "X-CSRF-Token": '{{ craft.app.request.csrfToken }}',
                },
                url: '',
                data: {
                    'action' : 'commerce/discounts/clear-discount-uses',
                    'id': '{{ discount.id ?? '' }}',
                    'type': type
                },
                success: function(data){
                    $spinner.toggleClass('hidden');
                    $field.val('');
                    Craft.cp.displayNotice(Craft.t('commerce', 'Counter has been cleared.'));
                    $this.attr('disabled', 'disabled').prop('disabled', 'disabled');
                }
            });
        }
    });

    new Craft.Commerce.Coupons('#commerce-coupons', {
        couponFormat: "{{ discount.couponFormat|e('js') }}",
        table: {
            name: "{{ couponsTable.name|namespaceInputName|e('js') }}",
            cols: {{ couponsTable.cols|json_encode|raw }},
            defaultValues: {{ couponsTable.defaultValues|json_encode|raw }}
        },
    });
});
{% endjs %}
