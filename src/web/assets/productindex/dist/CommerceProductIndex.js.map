{"version":3,"file":"CommerceProductIndex.js","mappings":"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","sources":["webpack:///./CommerceProductIndex.js"],"sourcesContent":["/** global: Craft */\n/** global: Garnish */\n/**\n * Product index class\n */\nCraft.Commerce.ProductIndex = Craft.BaseElementIndex.extend({\n  editableProductTypes: null,\n  $newProductBtnGroup: null,\n  $newProductBtn: null,\n\n  init: function (elementType, $container, settings) {\n    this.on('selectSource', $.proxy(this, 'updateButton'));\n    this.on('selectSite', $.proxy(this, 'updateButton'));\n    this.base(elementType, $container, settings);\n  },\n\n  afterInit: function () {\n    // Find which of the visible productTypes the user has permission to create new products in\n    this.editableProductTypes = [];\n\n    for (const productType of Craft.Commerce.editableProductTypes) {\n      if (this.getSourceByKey(`productType:${productType.uid}`)) {\n        this.editableProductTypes.push(productType);\n      }\n    }\n\n    this.base();\n  },\n\n  getDefaultSourceKey: function () {\n    // Did they request a specific product productType in the URL?\n    if (\n      this.settings.context === 'index' &&\n      typeof defaultProductTypeHandle !== 'undefined'\n    ) {\n      for (var i = 0; i < this.$sources.length; i++) {\n        var $source = $(this.$sources[i]);\n\n        if ($source.data('handle') === defaultProductTypeHandle) {\n          return $source.data('key');\n        }\n      }\n    }\n\n    return this.base();\n  },\n\n  updateButton: function () {\n    if (!this.$source) {\n      return;\n    }\n\n    // Get the handle of the selected source\n    const productTypeHandle = this.$source.data('handle');\n\n    // Update the New Product button\n    // ---------------------------------------------------------------------\n\n    if (this.editableProductTypes.length) {\n      // Remove the old button, if there is one\n      if (this.$newProductBtnGroup) {\n        this.$newProductBtnGroup.remove();\n      }\n\n      // Determine if they are viewing a productType that they have permission to create products in\n      const selectedProductType = this.editableProductTypes.find(\n        (t) => t.handle === productTypeHandle\n      );\n\n      this.$newProductBtnGroup = $(\n        '<div class=\"btngroup submit\" data-wrapper/>'\n      );\n      let $menuBtn;\n      const menuId = `new-product-menu-${Craft.randomString(10)}`;\n\n      // If they are, show a primary \"New product\" button, and a dropdown of the other productTypes (if any).\n      // Otherwise only show a menu button\n      if (selectedProductType) {\n        const visibleLabel =\n          this.settings.context === 'index'\n            ? Craft.t('commerce', 'New product')\n            : Craft.t('commerce', 'New {productType} product', {\n                productType: selectedProductType.name,\n              });\n\n        const ariaLabel =\n          this.settings.context === 'index'\n            ? Craft.t('commerce', 'New {productType} product', {\n                productType: selectedProductType.name,\n              })\n            : visibleLabel;\n\n        // In index contexts, the button functions as a link\n        // In non-index contexts, the button triggers a slideout editor\n        const role = this.settings.context === 'index' ? 'link' : null;\n\n        this.$newProductBtn = Craft.ui\n          .createButton({\n            label: visibleLabel,\n            ariaLabel: ariaLabel,\n            spinner: true,\n            role: role,\n          })\n          .addClass('submit add icon')\n          .appendTo(this.$newProductBtnGroup);\n\n        this.addListener(this.$newProductBtn, 'click mousedown', (ev) => {\n          // If this is the element index, check for Ctrl+clicks and middle button clicks\n          if (\n            this.settings.context === 'index' &&\n            ((ev.type === 'click' && Garnish.isCtrlKeyPressed(ev)) ||\n              (ev.type === 'mousedown' && ev.originalEvent.button === 1))\n          ) {\n            window.open(\n              Craft.getUrl(`commerce/products/${productType.handle}/new`)\n            );\n          } else if (ev.type === 'click') {\n            this._createProduct(selectedProductType.id);\n          }\n        });\n\n        if (this.editableProductTypes.length > 1) {\n          $menuBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit menubtn btngroup-btn-last',\n            'aria-controls': menuId,\n            'data-disclosure-trigger': '',\n            'aria-label': Craft.t('commerce', 'New product, choose a type'),\n          }).appendTo(this.$newProductBtnGroup);\n        }\n      } else {\n        this.$newProductBtn = $menuBtn = Craft.ui\n          .createButton({\n            label: Craft.t('app', 'New product'),\n            ariaLabel: Craft.t('app', 'New product, choose a type'),\n            spinner: true,\n          })\n          .addClass('submit add icon menubtn btngroup-btn-last')\n          .attr('aria-controls', menuId)\n          .attr('data-disclosure-trigger', '')\n          .appendTo(this.$newProductBtnGroup);\n      }\n\n      this.addButton(this.$newProductBtnGroup);\n\n      if ($menuBtn) {\n        const $menuContainer = $('<div/>', {\n          id: menuId,\n          class: 'menu menu--disclosure',\n        }).appendTo(this.$newProductBtnGroup);\n        const $ul = $('<ul/>').appendTo($menuContainer);\n\n        for (const productType of this.editableProductTypes) {\n          const anchorRole =\n            this.settings.context === 'index' ? 'link' : 'button';\n          if (\n            this.settings.context === 'index' ||\n            productType !== selectedProductType\n          ) {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n              role: anchorRole === 'button' ? 'button' : null,\n              href: Craft.getUrl(`commerce/products/${productType.handle}/new`),\n              type: anchorRole === 'button' ? 'button' : null,\n              text: Craft.t('commerce', 'New {productType} product', {\n                productType: productType.name,\n              }),\n            }).appendTo($li);\n            this.addListener($a, 'activate', () => {\n              $menuBtn.data('trigger').hide();\n              this._createProduct(productType.id);\n            });\n\n            if (anchorRole === 'button') {\n              this.addListener($a, 'keydown', (event) => {\n                if (event.keyCode === Garnish.SPACE_KEY) {\n                  event.preventDefault();\n                  $menuBtn.data('trigger').hide();\n                  this._createProduct(productType.id);\n                }\n              });\n            }\n          }\n        }\n\n        new Garnish.DisclosureMenu($menuBtn);\n      }\n    }\n\n    // Update the URL if we're on the Categories index\n    // ---------------------------------------------------------------------\n\n    if (this.settings.context === 'index') {\n      let uri = 'commerce/products';\n\n      if (productTypeHandle) {\n        uri += '/' + productTypeHandle;\n      }\n\n      Craft.setPath(uri);\n    }\n  },\n\n  _createProduct: function (productTypeId) {\n    if (this.$newProductBtn.hasClass('loading')) {\n      console.warn('New product creation already in progress.');\n      return;\n    }\n\n    // Find the product type\n    const productType = this.editableProductTypes.find(\n      (t) => t.id === productTypeId\n    );\n\n    if (!productType) {\n      throw `Invalid product type ID: ${productTypeId}`;\n    }\n\n    this.$newProductBtn.addClass('loading');\n\n    Craft.sendActionRequest('POST', 'commerce/products/create', {\n      data: {\n        siteId: this.siteId,\n        productType: productType.handle,\n      },\n    })\n      .then(({data}) => {\n        if (this.settings.context === 'index') {\n          document.location.href = Craft.getUrl(data.cpEditUrl, {fresh: 1});\n        } else {\n          const slideout = Craft.createElementEditor(this.elementType, {\n            siteId: this.siteId,\n            elementId: data.product.id,\n            draftId: data.product.draftId,\n            params: {\n              fresh: 1,\n            },\n          });\n          slideout.on('submit', () => {\n            this.clearSearch();\n            this.setSelectedSortAttribute('dateCreated', 'desc');\n            this.selectElementAfterUpdate(data.product.id);\n            this.updateElements();\n          });\n        }\n      })\n      .finally(() => {\n        this.$newProductBtn.removeClass('loading');\n      });\n  },\n});\n\n// Register it!\nCraft.registerElementIndexClass(\n  'craft\\\\commerce\\\\elements\\\\Product',\n  Craft.Commerce.ProductIndex\n);\n"],"names":["Craft","Commerce","ProductIndex","BaseElementIndex","extend","editableProductTypes","$newProductBtnGroup","$newProductBtn","init","elementType","$container","settings","this","on","$","proxy","base","afterInit","productType","getSourceByKey","uid","push","getDefaultSourceKey","context","defaultProductTypeHandle","i","$sources","length","$source","data","updateButton","productTypeHandle","remove","$menuBtn","selectedProductType","find","t","handle","menuId","randomString","visibleLabel","name","ariaLabel","role","ui","createButton","label","spinner","addClass","appendTo","addListener","ev","type","Garnish","isCtrlKeyPressed","originalEvent","button","window","open","getUrl","_createProduct","id","class","attr","addButton","$menuContainer","$ul","anchorRole","$li","$a","href","text","hide","event","keyCode","SPACE_KEY","preventDefault","DisclosureMenu","uri","setPath","productTypeId","hasClass","console","warn","sendActionRequest","siteId","then","document","location","cpEditUrl","fresh","createElementEditor","elementId","product","draftId","params","clearSearch","setSelectedSortAttribute","selectElementAfterUpdate","updateElements","removeClass","registerElementIndexClass"],"sourceRoot":""}