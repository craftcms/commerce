{"version":3,"file":"purchasablepricefield.js","mappings":"kPAG8C,cAA1C,EAAOA,MAAMC,YACfD,MAAMC,SAAW,CAAC,GAGpBD,MAAMC,SAASC,sBAAwBC,QAAQC,KAAKC,OAAO,CACzDC,WAAY,KACZC,iBAAkB,KAClBC,YAAa,KACbC,gBAAiB,KACjBC,aAAc,KACdC,cAAe,KAEfC,GAAI,KAEJC,SAAU,CACRC,OAAQ,KACRC,uBAAwB,KACxBC,WAAY,CACVC,MAAO,KACPC,iBAAkB,OAItBC,KAAM,SAAUP,EAAIQ,GAClBC,KAAKC,YAAYF,EAAUC,KAAKR,UAChCQ,KAAKT,GAAKA,EACVS,KAAKf,WAAaiB,EAAE,IAAMF,KAAKT,IAC/BS,KAAKZ,gBAAkBY,KAAKf,WAAWkB,KACrC,oCAEFH,KAAKd,iBAAmBc,KAAKZ,gBAAgBe,KAC3C,kCAEFH,KAAKb,YAAca,KAAKf,WAAWkB,KAAK,4BAEpCH,KAAKZ,gBAAgBgB,KAAK,iBAC5BJ,KAAKK,2BAELL,KAAKb,YAAYmB,GAAG,SAAS,SAACC,GAC5BA,EAAEC,gBACJ,IAEJ,EAEAC,gBAAiB,WAAY,WAC3BT,KAAKd,iBAAiBwB,YAAY,UAElC/B,MAAMgC,kBAAkB,OAAQ,kCAAmC,CACjEP,KAAM,CACJX,OAAQO,KAAKD,SAASN,OACtBmB,UAAW,CAACA,UAAWZ,KAAKD,SAASL,wBACrCmB,UAAWX,EACT,eAAiBF,KAAKD,SAASJ,WAAWC,MAAQ,aAClDkB,MACFC,qBAAsBb,EACpB,eACEF,KAAKD,SAASJ,WAAWE,iBACzB,aACFiB,MACFE,gBAAgB,EAChBC,mBAAmB,KAGpBC,MAAK,SAACC,GACL,EAAKjC,iBAAiBkC,SAAS,UAE3BD,EAASf,MACX,EAAKhB,gBACFe,KAAK,cACLkB,YAAYF,EAASf,KAAKkB,WAG/B,EAAKjC,aAAakC,IAAI,UACtB,EAAKjC,cAAciC,IAAI,SAEvB,EAAKlB,0BACP,IAAE,OACK,YAAgB,IAAdc,EAAQ,EAARA,SACFA,IAIL,EAAKjC,iBAAiBkC,SAAS,UAE3BD,EAASf,MAAQe,EAASf,KAAKoB,SACjC7C,MAAM8C,GAAGC,aAAaP,EAASf,KAAKoB,SAGtC,EAAKnC,aAAakC,IAAI,UACtB,EAAKjC,cAAciC,IAAI,SAEvB,EAAKlB,2BACP,GACJ,EAEAA,yBAA0B,WACxB,IAAMsB,EAAW3B,KAEjBA,KAAKX,aAAeW,KAAKf,WAAWkB,KAClC,eACEH,KAAKD,SAASJ,WAAWC,MACzB,0BACAI,KAAKD,SAASJ,WAAWE,iBACzB,aAEJG,KAAKV,cAAgBU,KAAKf,WAAWkB,KAAK,oBAE1CH,KAAKX,aAAaiB,GAAG,UAAU,SAAUC,GACvCoB,EAASlB,iBACX,IAGAT,KAAKV,cAAcgB,GAAG,SAAS,SAAUC,GACvCA,EAAEC,iBACF,IAAIoB,EAAQ1B,EAAEF,MACV6B,EAAS,CACXC,QAASF,EAAMxB,KAAK,YACpB2B,YAAaH,EAAMxB,KAAK,iBAGtBwB,EAAMxB,KAAK,2BACbyB,EAAOtC,GAAKqC,EAAMxB,KAAK,2BAEvByB,EAAOG,cAAgBJ,EAAMxB,KAAK,kBAGnB,IAAIzB,MAAMsD,iBACzB,sCACA,CAACJ,OAAAA,IAGMvB,GAAG,UAAU,SAAU,GAAS,EAARa,SAAc,EAAJf,KACzCzB,MAAM8C,GAAGS,WACTP,EAASlB,iBACX,GACF,GACF,G","sources":["webpack:///./js/purchasablepricefield.js"],"sourcesContent":["/* jshint esversion: 6 */\n/* globals Craft, Garnish, $ */\n\nif (typeof Craft.Commerce === typeof undefined) {\n  Craft.Commerce = {};\n}\n\nCraft.Commerce.PurchasablePriceField = Garnish.Base.extend({\n  $container: null,\n  $loadingElements: null,\n  $refreshBtn: null,\n  $tableContainer: null,\n  $priceFields: null,\n  $cprSlideouts: null,\n\n  id: null,\n\n  defaults: {\n    siteId: null,\n    conditionBuilderConfig: null,\n    fieldNames: {\n      price: null,\n      promotionalPrice: null,\n    },\n  },\n\n  init: function (id, settings) {\n    this.setSettings(settings, this.defaults);\n    this.id = id;\n    this.$container = $('#' + this.id);\n    this.$tableContainer = this.$container.find(\n      '.js-purchasable-toggle-container'\n    );\n    this.$loadingElements = this.$tableContainer.find(\n      '.js-purchasable-toggle-loading'\n    );\n    this.$refreshBtn = this.$container.find('.commerce-refresh-prices');\n\n    if (this.$tableContainer.data('init-prices')) {\n      this.initPurchasablePriceList();\n\n      this.$refreshBtn.on('click', (e) => {\n        e.preventDefault();\n      });\n    }\n  },\n\n  updatePriceList: function () {\n    this.$loadingElements.removeClass('hidden');\n\n    Craft.sendActionRequest('POST', 'commerce/catalog-pricing/prices', {\n      data: {\n        siteId: this.settings.siteId,\n        condition: {condition: this.settings.conditionBuilderConfig},\n        basePrice: $(\n          'input[name=\"' + this.settings.fieldNames.price + '\"][value]'\n        ).val(),\n        basePromotionalPrice: $(\n          'input[name=\"' +\n            this.settings.fieldNames.promotionalPrice +\n            '\"][value]'\n        ).val(),\n        forPurchasable: true,\n        includeBasePrices: false,\n      },\n    })\n      .then((response) => {\n        this.$loadingElements.addClass('hidden');\n\n        if (response.data) {\n          this.$tableContainer\n            .find('.tableview')\n            .replaceWith(response.data.tableHtml);\n        }\n\n        this.$priceFields.off('change');\n        this.$cprSlideouts.off('click');\n\n        this.initPurchasablePriceList();\n      })\n      .catch(({response}) => {\n        if (!response) {\n          return;\n        }\n\n        this.$loadingElements.addClass('hidden');\n\n        if (response.data && response.data.message) {\n          Craft.cp.displayError(response.data.message);\n        }\n\n        this.$priceFields.off('change');\n        this.$cprSlideouts.off('click');\n\n        this.initPurchasablePriceList();\n      });\n  },\n\n  initPurchasablePriceList: function () {\n    const instance = this;\n    // prettier-ignore\n    this.$priceFields = this.$container.find(\n      'input[name=\"' +\n        this.settings.fieldNames.price +\n        '[value]\"], input[name=\"' +\n        this.settings.fieldNames.promotionalPrice +\n        '[value]\"]'\n    );\n    this.$cprSlideouts = this.$container.find('.js-cpr-slideout');\n\n    this.$priceFields.on('change', function (e) {\n      instance.updatePriceList();\n    });\n\n    // New catalog price\n    this.$cprSlideouts.on('click', function (e) {\n      e.preventDefault();\n      let _this = $(this);\n      let params = {\n        storeId: _this.data('store-id'),\n        storeHandle: _this.data('store-handle'),\n      };\n\n      if (_this.data('catalog-pricing-rule-id')) {\n        params.id = _this.data('catalog-pricing-rule-id');\n      } else {\n        params.purchasableId = _this.data('purchasable-id');\n      }\n\n      const slideout = new Craft.CpScreenSlideout(\n        'commerce/catalog-pricing-rules/edit',\n        {params}\n      );\n\n      slideout.on('submit', function ({response, data}) {\n        Craft.cp.runQueue();\n        instance.updatePriceList();\n      });\n    });\n  },\n});\n"],"names":["Craft","Commerce","PurchasablePriceField","Garnish","Base","extend","$container","$loadingElements","$refreshBtn","$tableContainer","$priceFields","$cprSlideouts","id","defaults","siteId","conditionBuilderConfig","fieldNames","price","promotionalPrice","init","settings","this","setSettings","$","find","data","initPurchasablePriceList","on","e","preventDefault","updatePriceList","removeClass","sendActionRequest","condition","basePrice","val","basePromotionalPrice","forPurchasable","includeBasePrices","then","response","addClass","replaceWith","tableHtml","off","message","cp","displayError","instance","_this","params","storeId","storeHandle","purchasableId","CpScreenSlideout","runQueue"],"sourceRoot":""}