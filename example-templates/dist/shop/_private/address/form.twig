<!-- Template: {{ _self }}.twig -->
{#
Outputs address form fields for editing an address.
#}
{% set modelName = modelName is defined ? modelName : 'address' %}
{# @var model \craft\commerce\models\Address #}
{% set model = address is defined ? address : null %}

{# Define a simple a Twig macro for outputting validation errors and making template less redundant #}
{% macro displayErrors(model, fieldName) %}
  {% if model and model.getErrors(fieldName) %}
    <div class="text-red-700">{{ model.getErrors(fieldName)|join }}</div>
  {% endif %}
{% endmacro %}

<div class="js-address-box {{ modelName }}">
  {# First and last name fields #}
  <div class="md:flex md:-mx-4">
    <div class="md:w-1/2 md:mx-4 my-2">
      <label for="{{ modelName }}-firstName">
        {{- 'First Name'|t -}}
      </label>
      {{ input('text', modelName ~ '[firstName]', model ? model.firstName : '', {
        id: modelName ~ '-firstName',
        class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
      }) }}
      {{ _self.displayErrors(model, 'firstName') }}
    </div>
    <div class="md:w-1/2 md:mx-4 my-2">
      <label for="{{ modelName }}-lastName">
        {{- 'Last Name'|t -}}
      </label>
      {{ input('text', modelName ~ '[lastName]', model ? model.lastName : '', {
        id: modelName ~ '-lastName',
        class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
      }) }}
      {{ _self.displayErrors(model, 'lastName') }}
    </div>
  </div>

  {% set countries = craft.commerce.countries.allEnabledCountriesAsList %}
  {# Grab our model’s country ID or the cart’s billing address ID in that order #}
  {% set countryId = model.countryId ?? cart['estimated' ~ (modelName|capitalize)].countryId ?? null %}
  <div class="my-2">
    <label for="{{ modelName }}-countryId">
      {{- 'Country'|t }} *
    </label>
    {% tag 'select' with {
      id: modelName ~ '-countryId',
      'data-modelname': modelName,
      name: modelName ~ '[countryId]',
      class: ['js-address-country', 'w-full', 'max-w-full', 'h-9', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded', countries|length == 0 ? 'hidden' : ''],
    } %}
      {{ tag('option', {
        value: '',
        disabled: true,
        selected: countryId is empty,
        text: 'Select country'|t ~ '...'
      }) }}
      {% for key, option in countries %}
        {# @var option \craft\commerce\models\Country #}
        {% set optionValue = (countryId ?: '') %}
        {{ tag('option', {
          value: key,
          selected: key == optionValue,
          text: option
        }) }}
      {% endfor %}
    {% endtag %}
    {{ _self.displayErrors(model, 'countryId') }}
  </div>

  <div class="my-2">
    <label for="{{ modelName }}-address1">
      {{- 'Address 1'|t -}}
    </label>
    {{ input('text', modelName ~ '[address1]', model ? model.address1 : '', {
      id: modelName ~ '-address1',
      class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
    }) }}
    {{ _self.displayErrors(model, 'address1') }}
  </div>

  <div class="my-2">
    <label for="{{ modelName }}-address2">
      {{- 'Address 2'|t -}}
    </label>
    {{ input('text', modelName ~ '[address2]', model ? model.address2 : '', {
      id: modelName ~ '-address2',
      class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
    }) }}
    {{ _self.displayErrors(model, 'address2') }}
  </div>

  {# City, state, and postal code fields #}
  <div class="md:flex md:-mx-4">
    <div class="md:w-1/3 md:mx-4 my-2">
      <label for="{{ modelName }}-city">
        {{- 'City'|t -}}
      </label>
      {{ input('text', modelName ~ '[city]', model.city ?? '', {
        id: modelName ~ '-city',
        class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
      }) }}
    </div>
    <div class="md:w-1/3 md:mx-4 my-2">
      <label for="{{ modelName }}-state">
        {{- 'State'|t -}}
      </label>
      {# Get all states by country #}
      {% set states = craft.commerce.states.allEnabledStatesAsListGroupedByCountryId %}
      {# Get states for the selected country #}
      {% set options = (countryId and states[countryId] is defined ? states[countryId] : []) %}

      {% set stateId = model.stateId ?? cart['estimated' ~ (modelName|capitalize)].stateId ?? null %}
      {% set stateName = model.stateName ?? cart['estimated' ~ (modelName|capitalize)].stateName ?? null %}

      {% tag 'select' with {
        id: modelName ~ '-stateId',
        'data-modelname': modelName,
        name: modelName ~ '[stateValue]',
        class: ['js-address-stateId', 'w-full', 'max-w-full', 'h-9', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded', options|length == 0 ? 'hidden' : ''],
      } %}
        {{ tag('option', {
          value: '',
          disabled: true,
          selected: not stateId,
          text: 'Select state'|t ~ '...'
        }) }}
        {% for key, option in options %}
          {# @var option \craft\commerce\models\State #}
          {% set optionValue = (stateId ?: '') %}
          {{ tag('option', {
            value: key,
            selected: key == optionValue,
            text: option
          }) }}
        {% endfor %}
      {% endtag %}
      {{ input('text', options|length == 0 ? modelName ~ '[stateValue]', stateName ?: '', {
        id: modelName ~ '-stateName',
        'data-modelname': modelName,
        class: ['js-address-stateName', options|length > 0 ? 'hidden' : '', 'w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
      }) }}
      {{ _self.displayErrors(model, 'stateValue') }}
    </div>
    <div class="md:w-1/3 md:mx-4 my-2">
      {% set zipCode = model.zipCode ?? cart['estimated' ~ (modelName|capitalize)].zipCode ?? '' %}
      <label for="{{ modelName }}-zipCode">
        {{- 'Postal Code'|t -}}
      </label>
      {{ input('text', modelName ~ '[zipCode]', zipCode, {
        id: modelName ~ '-zipCode',
        class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
      }) }}
      {{ _self.displayErrors(model, 'zipCode') }}
    </div>
  </div>

  <div class="md:flex md:-mx-4">
    <div class="md:w-1/2 md:mx-4 my-2">
      <label for="{{ modelName }}-phone">
        {{- 'Phone'|t -}}
      </label>
      {{ input('tel', modelName ~ '[phone]', model ? model.phone : '', {
        id: modelName ~ '-phone',
        class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
      }) }}
      {{ _self.displayErrors(model, 'phone') }}
    </div>
  </div>

  <div class="my-2">
    <label for="{{ modelName }}-businessName">
      {{- 'Business Name'|t -}}
    </label>
    {{ input('text', modelName ~ '[businessName]', model ? model.businessName : '', {
      id: modelName ~ '-businessName',
      class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
    }) }}
    {{ _self.displayErrors(model, 'businessName') }}
  </div>

  <div class="md:flex md:-mx-4">
    <div class="md:w-1/2 md:mx-4 my-2">
      <label for="{{ modelName }}-businessTaxId">
        {{- 'Business Tax ID'|t -}}
      </label>
      {{ input('text', modelName ~ '[businessTaxId]', model ? model.businessTaxId : '', {
        id: modelName ~ '-businessTaxId',
        class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
      }) }}
      {{ _self.displayErrors(model, 'businessTaxId') }}
    </div>
    <div class="md:w-1/2 md:mx-4 my-2">
      <label for="{{ modelName }}-businessId">
        {{- 'Business ID'|t -}}
      </label>
      {{ input('text', modelName ~ '[businessId]', model ? model.businessId : '', {
        id: modelName ~ '-businessId',
        class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
      }) }}
      {{ _self.displayErrors(model, 'businessId') }}
    </div>
  </div>

  <div class="my-2">
    <label for="{{ modelName }}-label">
      {{- 'Label'|t -}}
    </label>
    {{ input('text', modelName ~ '[label]', model ? model.label : '', {
      id: modelName ~ '-label',
      class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
    }) }}
    {{ _self.displayErrors(model, 'label') }}
  </div>
</div>

{% js %}
{% set enabledStates = {} %}
{% for cId, cStates in craft.commerce.states.allEnabledStatesAsListGroupedByCountryId %}
    {% set eStates = {} %}
    {% for sId, s in cStates %}
        {% set eStates = eStates|merge({ ('state-' ~ sId): s }) %}
    {% endfor %}
    {% set enabledStates = enabledStates|merge({('country-' ~ cId): eStates}) %}
{% endfor %}

window.states = {{ enabledStates|json_encode|raw }};
{% endjs %}

{% js %}
var $countrySelects = document.querySelectorAll('select.js-address-country');

if ($countrySelects && $countrySelects.length) {
  $countrySelects.forEach(function(el) {
    el.addEventListener('change', function(ev) {
      var $this = ev.target;

      // Get the value of the selected country
      var cid = $this.value;
      var $closestAddressBox = $this.closest('.js-address-box');

      if ($closestAddressBox) {
        var $states = $closestAddressBox.querySelector('select.js-address-stateId');
        var $stateName = $closestAddressBox.querySelector('input.js-address-stateName');

        if ($states && $stateName) {
          // Get all options except empty initial “Select state...” item
          var $options = $states.querySelectorAll('option:not([value=""])');

          if ($options && $options.length) {
            $options.forEach(function(el) {
              el.remove();
            });
          }

          var countryKey = 'country-' + cid;
          if (window.states.hasOwnProperty(countryKey)) {
            // We have states to select for this country, so show the states dropdown
            $states.classList.remove('hidden');
            $states.setAttribute('name', $states.dataset.modelname + '[stateValue]');

            // Hide the stateName text input since we’re using a dropdown
            $stateName.removeAttribute('name');
            $stateName.classList.add('hidden');
            $stateName.value = '';

            // Add all states as dropdown options
            for (var id in window.states[countryKey]) {
              var state = window.states[countryKey][id];
              var $option = document.createElement('OPTION');
              $option.text = state;
              $option.value = id.replace('state-', '');
              $states.appendChild($option);
            }
          } else {
            // This country does not have a list of states, so hide the state dropdown
            $states.classList.add('hidden');
            $states.removeAttribute('name');

            // Show the stateName
            $stateName.classList.remove('hidden');
            $stateName.setAttribute('name', $stateName.dataset.modelname + '[stateValue]');
          }
        }
      }
    });
  });
}
{% endjs %}
