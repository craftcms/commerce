<!-- Template: {{ _self }}.twig -->
{#
Outputs a form for collecting shipping estimate address details if an address doesnâ€™t yet exist on the cart.

@var cart \craft\commerce\elements\Cart
#}
{% if not cart.getShippingAddress() %}
  {% set countries = craft.commerce.countries.allEnabledCountriesAsList %}
  {% set states = craft.commerce.states.allEnabledStatesAsListGroupedByCountryId %}

  <div class="bg-gray-100 border-blue-300 border-b-2 p-6">
    <h5 class="mt-0 font-bold">
      {{- 'Shipping Estimate'|t -}}
    </h5>

    <div class="js-estimate-fields">
      <label class="m-0 mt-2 block" for="estimatedShippingAddress-countryId">
        {{- 'Country'|t -}}
      </label>
      {% tag 'select' with {
        name: 'estimatedShippingAddress[countryId]',
        'data-modelname': 'estimatedShippingAddress',
        class: ['js-address-country', 'js-estimate-country', 'w-full', 'h-9', 'max-w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
      } %}
        {{ tag('option', {
          value: '',
          disabled: true,
          selected: not cart.estimatedShippingAddress,
          text: 'Select country'|t ~ '...'
        }) }}
        {% for key, option in countries %}
          {% set optionValue = (cart.estimatedShippingAddress ? cart.estimatedShippingAddress.countryId : '') %}
          {{ tag('option', {
            value: key,
            selected: key == optionValue,
            text: option
          }) }}
        {% endfor %}
      {% endtag %}

      <div class="lg:flex lg:-mx-2">
        <div class="lg:w-1/2 lg:mx-2 my-2">
          <div class="js-estimate-state-box" data-modelname="estimatedShippingAddress">
            <label class="mb-0 mt-2 block" for="estimatedShippingAddress-state">
              {{- 'State'|t -}}
            </label>
            {% set options = (cart.estimatedShippingAddress and states[cart.estimatedShippingAddress.countryId] is defined ?
              states[cart.estimatedShippingAddress.countryId] : []
              ) %}
            {% tag 'select' with {
              name: 'estimatedShippingAddress[stateValue]',
              id: 'estimatedShippingAddress-stateId',
              'data-modelname': 'estimatedShippingAddress',
              class: ['js-address-stateId', 'max-w-full', 'h-9', options|length == 0 ? 'hidden' : '', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
            } %}
              {{ tag('option', {
                value: '',
                disabled: true,
                selected: not cart.estimatedShippingAddress,
                text: 'Select state'|t ~ '...'
              }) }}
              {% for key, option in options %}
                {% set optionValue = (cart.estimatedShippingAddress ? cart.estimatedShippingAddress.stateId : '') %}
                {{ tag('option', {
                  value: key,
                  selected: key == optionValue,
                  text: option
                }) }}
              {% endfor %}
            {% endtag %}

            {{ input('text', options|length == 0 ? 'estimatedShippingAddress[stateValue]', cart.estimatedShippingAddress ? cart.estimatedShippingAddress.stateName : '', {
              id: 'estimatedShippingAddress-stateName',
              'data-modelname': 'estimatedShippingAddress',
              class: ['js-address-stateName', 'w-full', options|length > 0 ? 'hidden' : '', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
            }) }}
          </div>
        </div>
        <div class="lg:w-1/2 lg:mx-2 my-2">
          <label class="mb-0 mt-2 block" for="estimatedShippingAddress-zipCode">
            {{- 'Postal Code'|t -}}
          </label>
          {{ input('text', 'estimatedShippingAddress[zipCode]', cart.estimatedShippingAddress ? cart.estimatedShippingAddress.zipCode : '', {
            id: 'estimatedShippingAddress-zipCode',
            'data-modelname': 'estimatedShippingAddress',
            class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
          }) }}
        </div>
      </div>

      <div class="mt-4">
        <label class="m-0">
          {{ input('checkbox', 'estimatedBillingAddressSameAsShipping', 1, {
            checked: cart.estimatedShippingAddressId == cart.estimatedBillingAddressId
          }) }}
          {{ 'Billing Same as Shipping'|t }}
        </label>
      </div>


      <div class="js-estimate-billing mt-6">
        <h5 class="mt-0 font-bold">
          {{- 'Tax Estimate'|t -}}
        </h5>
        <label class="mb-0 mt-2 block" for="estimatedBillingAddress-countryId">
          {{- 'Country'|t -}}
        </label>
        {% tag 'select' with {
          name: 'estimatedBillingAddress[countryId]',
          'data-modelname': 'estimatedBillingAddress',
          class: ['js-address-country', 'js-estimate-country', 'w-full', 'max-w-full', 'h-9', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
        } %}
          {{ tag('option', {
            value: '',
            disabled: true,
            selected: not cart.estimatedBillingAddress,
            text: 'Select country'|t ~ '...'
          }) }}
          {% for key, option in countries %}
            {% set optionValue = (cart.estimatedBillingAddress ? cart.estimatedBillingAddress.countryId : '') %}
            {{ tag('option', {
              value: key,
              selected: key == optionValue,
              text: option
            }) }}
          {% endfor %}
        {% endtag %}

        <div class="lg:flex lg:-mx-2">
          <div class="lg:w-1/2 lg:mx-2 my-2">
            <div class="js-estimate-state-box" data-modelname="estimatedBillingAddress">
              <label class="mb-0 block" for="estimatedBillingAddress-state">
                {{- 'State'|t -}}
              </label>
              {% set options = (cart.estimatedBillingAddress and states[cart.estimatedBillingAddress.countryId] is defined ?
                states[cart.estimatedBillingAddress.countryId] : []
                ) %}
              {% tag 'select' with {
                name: 'estimatedBillingAddress[stateValue]',
                id: 'estimatedBillingAddress-stateId',
                'data-modelname': 'estimatedBillingAddress',
                class: ['js-address-stateId', 'w-full', 'max-w-full', 'h-9', options|length == 0 ? 'hidden', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
              } %}
                {{ tag('option', {
                  value: '',
                  disabled: true,
                  selected: not cart.estimatedBillingAddress,
                  text: 'Select state'|t ~ '...'
                }) }}
                {% for key, option in options %}
                  {% set optionValue = (cart.estimatedBillingAddress ? cart.estimatedBillingAddress.stateId : '') %}
                  {{ tag('option', {
                    value: key,
                    selected: key == optionValue,
                    text: option
                  }) }}
                {% endfor %}
              {% endtag %}
              {{ input('text', options|length == 0 ? 'estimatedBillingAddress[stateValue]', cart.estimatedBillingAddress ? cart.estimatedBillingAddress.stateName : '', {
                id: 'estimatedBillingAddress-stateName',
                'data-modelname': 'estimatedBillingAddress',
                class: ['js-address-stateName', options|length > 0 ? 'hidden', 'w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
              }) }}
            </div>
          </div>
          <div class="lg:w-1/2 lg:mx-2 my-2">
            <label class="mb-0 block" for="estimatedBillingAddress-zipCode">
              {{- 'Postal Code' -}}
            </label>
            {{ input('text', options|length == 0 ? 'estimatedBillingAddress[zipCode]', cart.estimatedBillingAddress ? cart.estimatedBillingAddress.zipCode : '', {
              id: 'estimatedBillingAddress-zipCode',
              class: ['w-full', 'border border-gray-300 hover:border-gray-500 px-4 py-2 leading-tight rounded']
            }) }}
          </div>
        </div>
      </div>
    </div>

    <div class="js-estimate-shipping-methods">
      {% if cart.availableShippingMethodOptions|length and cart.estimatedShippingAddressId %}
        <div class="mt-3">
          {% for handle, method in cart.availableShippingMethodOptions %}
            <div class="js-shipping-select">
              <label>
                {{ input('radio', 'shippingMethodHandle', handle, {
                  checked: handle == cart.shippingMethodHandle
                }) }}
                {{ method.name }}
                <span title="{{ method.priceForOrder(cart) }}">
                  {{- method.priceForOrder(cart)|commerceCurrency(cart.currency) -}}
                </span>
              </label>
            </div>
          {% endfor %}
        </div>
        <div class="mt-4">
          <a class="text-blue-500 hover:text-blue-600 js-estimate-show-fields" href="#">
            {{- 'Show estimate fields'|t -}}
          </a>
        </div>
      {% endif %}
    </div>
  </div>

  {% js %}
  {% set enabledStates = {} %}
{% for cId, cStates in craft.commerce.states.allEnabledStatesAsListGroupedByCountryId %}
    {% set eStates = {} %}
    {% for sId, s in cStates %}
        {% set eStates = eStates|merge({ ('state-' ~ sId): s }) %}
    {% endfor %}
    {% set enabledStates = enabledStates|merge({('country-' ~ cId): eStates}) %}
{% endfor %}

window.states = {{ enabledStates|json_encode|raw }};
  {% endjs %}

  {% js %}
  var $estimateShippingMethodsContainer = document.querySelector('.js-estimate-shipping-methods');
  var $estimateFieldsContainer = document.querySelector('.js-estimate-fields');
  var $estimateShowFieldsButton = document.querySelector('.js-estimate-show-fields');
  var $estimateBilling = document.querySelector('.js-estimate-billing');
  var $estimateBillingSameAsShipping = document.querySelector('input[name="estimatedBillingAddressSameAsShipping"]');
  var $estimateCountrySelects = document.querySelectorAll('select.js-estimate-country');

  function _estimatorHide(el) {
    el.classList.add('hidden');
    var inputs = el.querySelectorAll('input,select');
    if (inputs.length) {
      inputs.forEach(function(el) {
        el.disabled = true;
      });
    }
  }

  function _estimatorShow(el) {
    el.classList.remove('hidden');
    var inputs = el.querySelectorAll('input,select');
    if (inputs.length) {
      inputs.forEach(function(el) {
        el.disabled = false;
      });
    }
  }

  // Setup "same as" checkbox
  if ($estimateBillingSameAsShipping.checked) {
    _estimatorHide($estimateBilling);
  }

  // Handle the change event for the "same as" checkbox
  $estimateBillingSameAsShipping.addEventListener('change', function(event) {
    var $this = event.target;
    if ($this.checked) {
      _estimatorHide($estimateBilling);
    } else {
      _estimatorShow($estimateBilling);
    }
  });

  // Setup initial state showing/hiding of the shipping method selection
  var shippingSelect = $estimateShippingMethodsContainer.querySelector('.js-shipping-select');
  if (shippingSelect) {
    _estimatorHide($estimateFieldsContainer);
  } else {
    _estimatorHide($estimateShippingMethodsContainer);
  }

  // Handle click event for returning to the estimate fields
  if ($estimateShowFieldsButton) {
    $estimateShowFieldsButton.addEventListener('click', function(event) {
      event.preventDefault();

      if ($estimateFieldsContainer.classList.contains('hidden')) {
        _estimatorShow($estimateFieldsContainer);
        _estimatorHide($estimateShippingMethodsContainer);
      } else {
        _estimatorHide($estimateFieldsContainer);
        _estimatorShow($estimateShippingMethodsContainer);
      }
    });
  }

  // Handle change event for country selection for both shipping and billing
  $estimateCountrySelects.forEach(element => {
    element.addEventListener('change', event => {
      // get the value of the selected country.
      var $this = event.target;
      var cid = $this.value;
      var $box = document.querySelector('.js-estimate-state-box[data-modelname="' + $this.dataset.modelname + '"]');
      var $states = $box.querySelector('select.js-address-stateId');
      var $stateName = $box.querySelector('input.js-address-stateName');
      var $statesOption = $states.querySelectorAll('option:not([value=""]');

      if ($statesOption.length) {
        $statesOption.forEach(function(el) {
          el.remove();
        });
      }

      var countryKey = 'country-' + cid;
      if (window.states.hasOwnProperty(countryKey)) {
        // We have states for this country, show the states drop down.
        $states.classList.remove('hidden');
        $states.setAttribute('name', $states.dataset.modelname + '[stateValue]');

        // We have states for this country, hide the stateName input.
        $stateName.removeAttribute('name');
        $stateName.classList.add('hidden');
        $stateName.value = '';

        // Add all states as options to drop down.
        for (var id in window.states[countryKey]) {
          var state = window.states[countryKey][id];
          var $option = document.createElement('OPTION');
          $option.text = state;
          $option.value = id.replace('state-', '');
          $states.appendChild($option);
        }
      } else {
        // hide the states dropdown, since this country has none.
        $states.classList.add('hidden');
        $states.removeAttribute('name');

        // show the stateName
        $stateName.classList.remove('hidden');
        $stateName.setAttribute('name', $stateName.dataset.modelname + '[stateValue]');
      }
    });
  });
{% endjs %}
{% endif %}
