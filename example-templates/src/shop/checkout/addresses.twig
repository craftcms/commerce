{% extends '[[folderName]]/_private/layouts' %}

{% block main %}
    <!-- Template: {{ _self }}.twig -->
    {% set addresses = craft.commerce.customers.customer.addresses %}
    <div class="flex -mx-8">
        <div class="w-2/3 px-8">
            <h1 class="text-xl font-bold">Where should we send your order?</h1>

            <div class="mt-6">

                <form method="post" action="">
                    {{ actionInput('commerce/cart/update-cart') }}
                    {{ successMessageInput('Addresses selected.') }}
                    {{ redirectInput('[[folderName]]/checkout/shipping') }}
                    {{ csrfInput() }}

                    {% if not cart.email %}
                        <label for="email">Email</label>
                        <input type="email"
                               id="email"
                               name="email"
                               class="w-full [[classes.input]]"
                               value="{{ cart.email }}"
                               placeholder="email@site.com"/>

                        <span class="flash">{{ cart.getErrors('email')|join }}</span><br>
                    {% endif %}

                    {{ include('[[folderName]]/_private/address/fieldset', {
                        title: "Shipping Address",
                        classes: 'ShippingAddress',
                        name: 'shippingAddress'
                    }) }}

                    {{ hiddenInput('billingAddressSameAsShipping', 0) }}

                    <div class="mt-3">
                        <label>
                            <input type="checkbox"
                                   id="billingAddressSameAsShipping"
                                   name="billingAddressSameAsShipping"
                                   checked="checked"/>
                            Use same address for billing
                        </label>
                    </div>

                    <div class="mt-3">
                        <label>
                            <input type="checkbox"
                                   id="makePrimaryShippingAddress"
                                   name="makePrimaryShippingAddress"/>
                            Make this the primary shipping address
                        </label>
                    </div>

                    <div class="mt-3">
                        {{ include('[[folderName]]/_private/address/fieldset', {
                            title: "Billing Address",
                            classes: 'BillingAddress hidden',
                            name: 'billingAddress'
                        }) }}
                    </div>

                    <div class="mt-3">
                        <label>
                            <input type="checkbox"
                                   id="makePrimaryBillingAddress"
                                   name="makePrimaryBillingAddress"/>
                            Make this the primary billing address
                        </label>
                    </div>

                    <div class="mt-3 flex justify-end">
                        <button type="submit"
                                class="[[classes.btn.base]] [[classes.btn.mainColor]]">
                            Confirm addresses
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <div class="w-1/3 pr-8">
            {% include "[[folderName]]/checkout/_includes/order-summary" %}
        </div>
    </div>

    {% js %}
    var $fieldsets = document.querySelectorAll('.js-address-fieldset');

    if ($fieldsets && $fieldsets.length) {
        $fieldsets.forEach(function(el) {
            var $addressSelects = el.querySelectorAll('.js-address-select');

            if ($addressSelects && $addressSelects.length) {
                $addressSelects.forEach(function(el) {
                    var $radio = el.querySelector('.js-radio input');
                    var $body = el.querySelector('.js-body');

                    if ($radio) {
                        if ($body) {
                            // Creating new address
                            $radio.addEventListener('change', function(ev) {
                                if (ev.target.checked) {
                                    $body.classList.remove('hidden');
                                } else {
                                    $body.classList.add('hidden');
                                }
                            });

                            if ($radio.checked) {
                                $body.classList.remove('hidden');
                            }
                        } else {
                            // Selecting existing address
                            $radio.addEventListener('change', function(ev) {
                                if (ev.target.checked) {
                                    var $newBox = document.querySelector('.js-address-select[data-model-name="' + ev.target.dataset.modelName + '"]');
                                    if ($newBox) {
                                        $newBox.querySelector('.js-body').classList.add('hidden');
                                    }
                                }
                            });
                        }
                    }
                });
            }
        });
    }

    var $billingSameAs = document.querySelector('#billingAddressSameAsShipping');
    if ($billingSameAs) {
        $billingSameAs.addEventListener('change', function(ev) {
            var $billingFieldSet = document.querySelector('.js-address-fieldset.BillingAddress');
            $billingFieldSet.classList.toggle('hidden');
        });
    }
    {% endjs %}

    {% js %}
    {% if (cart.billingAddressId and cart.billingAddress.hasErrors()) or (cart.billingAddressId != cart.shippingAddressId) %}
        $billingSameAs.click();
    {% endif %}
{% endjs %}

{% endblock %}
